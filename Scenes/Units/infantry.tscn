[gd_scene load_steps=53 format=3 uid="uid://dli7arg3vprq4"]

[ext_resource type="Script" uid="uid://cms6k1uocuuv2" path="res://Scripts/Units/Units/Infantry.cs" id="1_2fp7d"]
[ext_resource type="Texture2D" uid="uid://coca1wutprsho" path="res://Assets/Textures/SelectBorder.png" id="2_mhdsq"]
[ext_resource type="PackedScene" uid="uid://chptg2e33u5s4" path="res://Scenes/Shared/healthbar.tscn" id="4_r0f05"]
[ext_resource type="AudioStream" uid="uid://bo8auev662hot" path="res://Assets/Audio/TankFireExtraBass.wav" id="5_7kmu1"]
[ext_resource type="AudioStream" uid="uid://co77t3mud6al4" path="res://Assets/Audio/ImpactWithMetal.wav" id="7_3d2wm"]
[ext_resource type="AudioStream" uid="uid://c16bgi1py2kfw" path="res://Assets/Audio/ExplosionWithMetal.wav" id="8_t7228"]
[ext_resource type="Script" uid="uid://dlbb13mgp6kq1" path="res://Scripts/Units/CombatSystem.cs" id="10_gl3ar"]
[ext_resource type="Script" uid="uid://bhmxuey5m0ru8" path="res://Scripts/Units/HealthSystem.cs" id="11_jnobf"]
[ext_resource type="Script" uid="uid://h6bdsqjhlaxl" path="res://Scripts/Units/WeaponSystem.cs" id="12_7qmmn"]
[ext_resource type="PackedScene" uid="uid://ell248v16ses" path="res://Scenes/VFX/explosion.tscn" id="13_7topc"]
[ext_resource type="Texture2D" uid="uid://djsa3anxcvbst" path="res://Assets/Textures/MuzzleFlash/MuzzleFlash.png" id="14_len2g"]
[ext_resource type="ArrayMesh" uid="uid://gv6m7q3rqdu5" path="res://Assets/VFX/MuzzlePlane.obj" id="15_fnrf3"]
[ext_resource type="Texture2D" uid="uid://brscwxgt8w15i" path="res://Assets/Textures/MuzzleFlash/MuzzleFlashCone.png" id="16_l0e8h"]
[ext_resource type="ArrayMesh" uid="uid://dxut7hkb8p4cl" path="res://Assets/VFX/MuzzleCone.obj" id="17_6ud4c"]
[ext_resource type="PackedScene" uid="uid://wrtccqu5n2tm" path="res://Scenes/Units/LOD/Infantry/infantry_lp.tscn" id="18_8tceu"]
[ext_resource type="Texture2D" uid="uid://xncrdbwk0mde" path="res://Assets/Textures/MuzzleFlash/MuzzleFlashBeam.png" id="18_enyns"]
[ext_resource type="Shader" uid="uid://0llt3gcj2lyb" path="res://Shaders/impact_smoke.tres" id="19_ph7o2"]

[sub_resource type="CylinderShape3D" id="CylinderShape3D_ebj34"]
height = 1.0
radius = 0.385

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_mfhdj"]
playback_mode = 1
random_pitch = 1.5
random_volume_offset_db = 0.8
streams_count = 1
stream_0/stream = ExtResource("5_7kmu1")

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_fl6pk"]
random_pitch = 1.5
random_volume_offset_db = 0.8
streams_count = 1
stream_0/stream = ExtResource("7_3d2wm")

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_sd0dm"]
streams_count = 1
stream_0/stream = ExtResource("8_t7228")

[sub_resource type="CSharpScript" id="CSharpScript_sshfv"]
script/source = "using System;
using System.Collections.Generic;
using System.Diagnostics; // [Conditional(\"DEBUG\")]
using Godot;
using MyEnums;

public partial class LODManager : Node
{
	[ExportCategory(\"LOD\")]
	[Export] private float _lodNear = 23f;
	[Export] private float _lodHysteresis = 3f;
	[Export] private float _updateHz = 8f;
	[Export] private LODScenes _highId = LODScenes.AntiInfantryHP;
	[Export] private LODScenes _lowId = LODScenes.AntiInfantryLP;

	[ExportCategory(\"Sockets (RELATIVE TO THIS NODE)\")]
	[Export] public NodePath PrimaryTurretPath;
	[Export] public NodePath PrimaryMuzzleContainerPath;
	[Export] public NodePath SecondaryTurretPath;
	[Export] public NodePath SecondaryMuzzleContainerPath;
	[Export] public NodePath AnimationPlayerPath;

	[ExportCategory(\"Metric\")]
	[Export] public bool UseTrue3DDistance = true;

	[ExportCategory(\"Debug\")]
	[Export] public bool DebugLOD = false;
	[Export] public bool DebugSockets = false;

	private Unit _unit;
	private Camera3D _cam;
	private Node3D _model;
	private double _accum;
	private bool _initialized;

	private enum LodTier { High, Low }
	private LodTier _lodState = LodTier.Low;

	// Exposed sockets
	public Node3D PrimaryTurretYaw { get; private set; }
	public List<Node3D> PrimaryMuzzles { get; private set; } = new();
	public Node3D SecondaryTurretYaw { get; private set; }
	public List<Node3D> SecondaryMuzzles { get; private set; } = new();
	public AnimationPlayer AnimationPlayer { get; private set; }

	// Events (muzzles are arrays)
	public event Action<Node3D, IReadOnlyList<Node3D>, AnimationPlayer> SocketsChangedPrimary;
	public event Action<Node3D, IReadOnlyList<Node3D>, AnimationPlayer> SocketsChangedSecondary;

	public event Action<Node3D> ModelChanged;

	private bool _swapScheduled;

	private static bool Alive(Node n) => n != null && GodotObject.IsInstanceValid(n) && n.IsInsideTree();
	[Conditional(\"DEBUG\")] private void DBG(string msg) { if (DebugLOD || DebugSockets) GD.Print($\"[LODManager] {msg}\"); }

	public override void _Ready()
	{
		Utils.NullExportCheck(PrimaryTurretPath);
		Utils.NullExportCheck(PrimaryMuzzleContainerPath);
		Utils.NullExportCheck(AnimationPlayerPath);

		_cam = GetViewport().GetCamera3D();
		_unit = GetNodeOrNull<Unit>(\"../../\");
		_model = _unit?.GetNodeOrNull<Node3D>(\"Model\");
		if (_unit == null) { GD.PushError(\"[LODManager] Unit not found via '../../'.\"); return; }

		EvaluateAndMaybeSwap(initial: true);
	}

	public override void _PhysicsProcess(double delta)
	{
		_accum += delta;
		if (_accum < 1.0 / MathF.Max(1f, _updateHz)) return;
		_accum = 0;
		EvaluateAndMaybeSwap();
	}

	private void EvaluateAndMaybeSwap(bool initial = false)
	{
		_cam ??= GetViewport().GetCamera3D();
		if (_cam == null || _unit == null) return;

		float distSq;
		if (UseTrue3DDistance)
			distSq = (_cam.GlobalPosition - _unit.GlobalPosition).LengthSquared();
		else
		{
			Vector3 d = _cam.GlobalPosition - _unit.GlobalPosition; d.Y = 0f;
			distSq = d.LengthSquared();
		}

		float inDist = MathF.Max(0f, _lodNear - _lodHysteresis);
		float outDist = _lodNear + _lodHysteresis;
		float nearSq = _lodNear * _lodNear;
		float inSq = inDist * inDist;
		float outSq = outDist * outDist;

		var desired = _lodState;
		if (!_initialized) desired = (distSq <= nearSq) ? LodTier.High : LodTier.Low;
		else if (_lodState == LodTier.High && distSq > outSq) desired = LodTier.Low;
		else if (_lodState == LodTier.Low && distSq < inSq) desired = LodTier.High;

		if (DebugLOD) GD.Print($\"[LODManager] dist={(float)Math.Sqrt(distSq):0.00} near={_lodNear} in={inDist} out={outDist} cur={_lodState} want={desired}\");

		if (!_initialized) { _initialized = true; SwapModelDeferred(desired); return; }
		if (desired != _lodState) SwapModelDeferred(desired);
	}

	private void SwapModelDeferred(LodTier tier)
	{
		if (_swapScheduled) return;
		_swapScheduled = true;
		CallDeferred(nameof(DoSwapModel), (int)tier);
	}

	private void DoSwapModel(int tierInt)
	{
		_swapScheduled = false;

		// snapshot turret yaws safely
		float yawPrimary = Alive(PrimaryTurretYaw) ? PrimaryTurretYaw.Rotation.Y : 0f;
		float yawSecondary = Alive(SecondaryTurretYaw) ? SecondaryTurretYaw.Rotation.Y : 0f;

		var tier = (LodTier)tierInt;
		var sceneId = (tier == LodTier.High) ? _highId : _lowId;
		var ps = AssetServer.Instance.Models.LODs[sceneId];
		if (ps == null) { GD.PushError($\"[LODManager] PackedScene for {sceneId} is null.\"); return; }

		var old = _model;
		var oldXf = old?.Transform ?? Transform3D.Identity;

		if (old != null && old.Name == \"Model\") old.Name = \"Model__OLD\";

		var next = ps.Instantiate<Node3D>();
		next.Name = \"Model\";
		next.Transform = oldXf;

		_unit.AddChild(next);
		_model = next;
		_lodState = tier;

		BindSockets();
		ModelChanged?.Invoke(_model);

		if (Alive(PrimaryTurretYaw)) { var r = PrimaryTurretYaw.Rotation; r.Y = yawPrimary; PrimaryTurretYaw.Rotation = r; }
		if (Alive(SecondaryTurretYaw)) { var r = SecondaryTurretYaw.Rotation; r.Y = yawSecondary; SecondaryTurretYaw.Rotation = r; }

		old?.QueueFree();
		if (DebugLOD) GD.Print($\"[LODManager] swapped to {tier} (scene {sceneId}).\");
	}

	private void BindSockets()
	{
		PrimaryTurretYaw = GetNodeOrNull<Node3D>(PrimaryTurretPath);
		PrimaryMuzzles = CollectMuzzlesFrom(GetNodeOrNull<Node3D>(PrimaryMuzzleContainerPath));

		SecondaryTurretYaw = (SecondaryTurretPath != null && !SecondaryTurretPath.IsEmpty)
			? GetNodeOrNull<Node3D>(SecondaryTurretPath) : null;

		SecondaryMuzzles = (SecondaryMuzzleContainerPath != null && !SecondaryMuzzleContainerPath.IsEmpty)
			? CollectMuzzlesFrom(GetNodeOrNull<Node3D>(SecondaryMuzzleContainerPath))
			: new List<Node3D>();

		AnimationPlayer = GetNodeOrNull<AnimationPlayer>(AnimationPlayerPath);

		if (DebugSockets)
		{
			GD.Print($\"[LODManager] PrimaryYaw={PrimaryTurretYaw?.GetPath()}  PrimaryMuzzles={PrimaryMuzzles.Count}\");
			GD.Print($\"[LODManager] SecondaryYaw={SecondaryTurretYaw?.GetPath()}  SecondaryMuzzles={SecondaryMuzzles.Count}\");
		}

		// Defer emits so every listener sees the final, stable lists
		CallDeferred(nameof(EmitPrimary));
		CallDeferred(nameof(EmitSecondary));
	}

	private void EmitPrimary()
	{
		// pass a clone so listeners canâ€™t be affected by future swaps
		SocketsChangedPrimary?.Invoke(PrimaryTurretYaw, new List<Node3D>(PrimaryMuzzles), AnimationPlayer);
	}

	private void EmitSecondary()
	{
		if (SecondaryTurretPath == null && SecondaryMuzzleContainerPath == null) return;
		SocketsChangedSecondary?.Invoke(SecondaryTurretYaw, new List<Node3D>(SecondaryMuzzles), null);
	}

	private static List<Node3D> CollectMuzzlesFrom(Node3D container)
	{
		var list = new List<Node3D>();
		if (container == null) return list;

		bool addedChild = false;
		foreach (var child in container.GetChildren())
		{
			if (child is Node3D n3 && n3.Name.ToString().StartsWith(\"Muzzle\"))
			{
				list.Add(n3);
				addedChild = true;
			}
		}
		if (!addedChild && container.Name.ToString().StartsWith(\"Muzzle\"))
			list.Add(container);

		list.RemoveAll(n => n == null || !GodotObject.IsInstanceValid(n) || !n.IsInsideTree());
		return list;
	}

	public void ForceSwapToHigh() => SwapModelDeferred(LodTier.High);
	public void ForceSwapToLow() => SwapModelDeferred(LodTier.Low);
}
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_0g5s4"]
render_priority = 1
transparency = 1
blend_mode = 1
cull_mode = 2
shading_mode = 0
vertex_color_use_as_albedo = true
vertex_color_is_srgb = true
albedo_texture = ExtResource("14_len2g")

[sub_resource type="Curve" id="Curve_4tim4"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_fl6pk"]
curve = SubResource("Curve_4tim4")

[sub_resource type="Curve" id="Curve_dun38"]
_data = [Vector2(0, 0), 0.0, 3.20406, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_uqx8m"]
curve = SubResource("Curve_dun38")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_l8yb7"]
gravity = Vector3(0, 0, 0)
scale_min = 1.75
scale_max = 1.75
scale_curve = SubResource("CurveTexture_uqx8m")
color = Color(2, 1.5, 1, 1)
alpha_curve = SubResource("CurveTexture_fl6pk")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_w5rfh"]
transparency = 1
blend_mode = 1
cull_mode = 2
shading_mode = 0
vertex_color_use_as_albedo = true
vertex_color_is_srgb = true
albedo_texture = ExtResource("16_l0e8h")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_f5mem"]
transparency = 1
blend_mode = 1
cull_mode = 2
shading_mode = 0
vertex_color_use_as_albedo = true
vertex_color_is_srgb = true
albedo_texture = ExtResource("18_enyns")
billboard_mode = 3
billboard_keep_scale = true
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false

[sub_resource type="Curve" id="Curve_ct0ub"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_0t0mp"]
curve = SubResource("Curve_ct0ub")

[sub_resource type="Curve" id="Curve_5swof"]
_data = [Vector2(0, 0), 0.0, 3.20406, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_q6gvt"]
curve = SubResource("Curve_5swof")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_qbaht"]
gravity = Vector3(0, 0, 0)
scale_min = 3.0
scale_max = 3.0
scale_curve = SubResource("CurveTexture_q6gvt")
color = Color(1.5, 1, 0.5, 1)
alpha_curve = SubResource("CurveTexture_0t0mp")

[sub_resource type="QuadMesh" id="QuadMesh_5f8ud"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_62a0k"]
transparency = 1
blend_mode = 1
cull_mode = 2
vertex_color_use_as_albedo = true
vertex_color_is_srgb = true
albedo_texture = ExtResource("18_enyns")

[sub_resource type="Curve" id="Curve_7knbb"]
_data = [Vector2(0.00512821, 0.987116), 0.0, -2.96919, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_mbwrp"]
curve = SubResource("Curve_7knbb")

[sub_resource type="Curve" id="Curve_oxulr"]
_limits = [0.0, 100.0, 0.0, 1.0]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.992308, 100), 294.556, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_wrkjq"]
curve = SubResource("Curve_oxulr")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_0231x"]
particle_flag_align_y = true
emission_shape = 1
emission_sphere_radius = 0.6
direction = Vector3(0, 0, 1)
spread = 50.0
initial_velocity_min = 10.0
initial_velocity_max = 50.0
gravity = Vector3(0, 0, 0)
damping_min = 0.5
damping_max = 0.8
damping_curve = SubResource("CurveTexture_wrkjq")
scale_min = 0.05
scale_max = 0.3
color = Color(5, 3, 1, 1)
alpha_curve = SubResource("CurveTexture_mbwrp")

[sub_resource type="QuadMesh" id="QuadMesh_x2ywe"]
size = Vector2(0.3, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hofw4"]
render_priority = 1
shader = ExtResource("19_ph7o2")
shader_parameter/DistanceFade = 0.3

[sub_resource type="Curve" id="Curve_2qrto"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.489362, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_pw7cq"]
curve = SubResource("Curve_2qrto")

[sub_resource type="Gradient" id="Gradient_l8yob"]
colors = PackedColorArray(0, 0, 0, 1, 0.0177324, 0.0177324, 0.0177324, 0.619)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_xrrag"]
gradient = SubResource("Gradient_l8yob")
use_hdr = true

[sub_resource type="Curve" id="Curve_l2ncb"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(1, 0.325843), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_smbrw"]
curve = SubResource("Curve_l2ncb")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_87a0m"]
emission_shape = 6
emission_ring_axis = Vector3(0, 0, 1)
emission_ring_height = 0.0
emission_ring_radius = 1.0
emission_ring_inner_radius = 1.0
emission_ring_cone_angle = 90.0
angle_min = -180.0
angle_max = 180.0
direction = Vector3(1, 1, 0)
radial_velocity_min = 0.499978
radial_velocity_max = 0.499978
gravity = Vector3(0, 0, 0)
scale_min = 0.5
scale_max = 0.75
scale_curve = SubResource("CurveTexture_smbrw")
color_ramp = SubResource("GradientTexture1D_xrrag")
alpha_curve = SubResource("CurveTexture_pw7cq")

[sub_resource type="SphereMesh" id="SphereMesh_p8gj8"]

[node name="Infantry" type="CharacterBody3D" node_paths=PackedStringArray("Death", "PrimaryWeaponSystem", "_healthSystem") groups=["damageable", "units"]]
script = ExtResource("1_2fp7d")
InfantryType = 1
Speed = 4
HP = 100
Cost = 100
BuildTime = 4
Acceleration = 4
Death = NodePath("Death")
MiniMapRadius = 3.0
PrimaryWeaponSystem = NodePath("Systems/WeaponSystemPrimary")
_healthSystem = NodePath("Systems/HealthSystem")
metadata/_edit_group_ = true

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1.1, 0, 0, 0, 1.1, 0, 0, 0, 1.1, 1.02692e-08, 0.893195, -0.00991298)
shape = SubResource("CylinderShape3D_ebj34")

[node name="SelectBorder" type="Sprite3D" parent="."]
transform = Transform3D(1.074, 0, 0, 0, 1.074, 0, 0, 0, 1.074, 0, 1.40772, 0)
billboard = 1
no_depth_test = true
render_priority = 1
texture = ExtResource("2_mhdsq")

[node name="NavigationAgent3D" type="NavigationAgent3D" parent="."]
avoidance_enabled = true

[node name="Healthbar" parent="." instance=ExtResource("4_r0f05")]
transform = Transform3D(1.01, 0, 0, 0, 1.155, 0, 0, 0, 1.155, 0, 3.15472, 0)

[node name="Audio" type="Node3D" parent="."]

[node name="AttackPrimary" type="AudioStreamPlayer3D" parent="Audio"]
transform = Transform3D(-1, 0, 8.74228e-08, 0, 1, 0, -8.74228e-08, 0, -1, 0, 0, 0)
stream = SubResource("AudioStreamRandomizer_mfhdj")
volume_db = 6.0

[node name="Impact" type="AudioStreamPlayer3D" parent="Audio"]
transform = Transform3D(-1, 0, 8.74228e-08, 0, 1, 0, -8.74228e-08, 0, -1, 0, 0, 0)
stream = SubResource("AudioStreamRandomizer_fl6pk")
volume_db = 3.0

[node name="Death" type="AudioStreamPlayer3D" parent="Audio"]
stream = SubResource("AudioStreamRandomizer_sd0dm")
volume_db = 8.5

[node name="Systems" type="Node" parent="."]

[node name="LODManager" type="Node" parent="Systems"]
script = SubResource("CSharpScript_sshfv")

[node name="CombatSystemPrimary" type="Node" parent="Systems" node_paths=PackedStringArray("_unit", "_weaponSystem", "_muzzleFlashParticles", "_attackSound")]
script = ExtResource("10_gl3ar")
_unit = NodePath("../..")
_weaponSystem = NodePath("../WeaponSystemPrimary")
_muzzleFlashParticles = NodePath("../../MuzzleFlashPrimary")
_attackSound = NodePath("../../Audio/AttackPrimary")

[node name="HealthSystem" type="Node" parent="Systems" node_paths=PackedStringArray("_unit")]
script = ExtResource("11_jnobf")
_unit = NodePath("../..")

[node name="WeaponSystemPrimary" type="Node" parent="Systems"]
script = ExtResource("12_7qmmn")
Dmg = 35
Range = 25
FireRate = 0.75
ProjectileSpeed = 150.0
BulletSpread = 0.5
WeaponType = 2
ProjectileScale = Vector3(0.3, 0.3, 0.3)

[node name="Death" parent="." instance=ExtResource("13_7topc")]

[node name="MuzzleFlashPrimary" type="Node3D" parent="."]
transform = Transform3D(0.115, 0, 0, 0, 0.115, 0, 0, 0, 0.115, -1.56372, 2.0439, -3.74627)

[node name="MuzzlePlanes" type="GPUParticles3D" parent="MuzzleFlashPrimary"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)
material_override = SubResource("StandardMaterial3D_0g5s4")
emitting = false
amount = 1
lifetime = 0.1
one_shot = true
randomness = 1.0
process_material = SubResource("ParticleProcessMaterial_l8yb7")
draw_pass_1 = ExtResource("15_fnrf3")

[node name="MuzzleCone" type="GPUParticles3D" parent="MuzzleFlashPrimary"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)
material_override = SubResource("StandardMaterial3D_w5rfh")
emitting = false
amount = 1
lifetime = 0.1
one_shot = true
randomness = 1.0
process_material = SubResource("ParticleProcessMaterial_l8yb7")
draw_pass_1 = ExtResource("17_6ud4c")

[node name="BeamFlash" type="GPUParticles3D" parent="MuzzleFlashPrimary"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)
material_override = SubResource("StandardMaterial3D_f5mem")
emitting = false
amount = 1
lifetime = 0.1
one_shot = true
randomness = 1.0
process_material = SubResource("ParticleProcessMaterial_qbaht")
draw_pass_1 = SubResource("QuadMesh_5f8ud")

[node name="Sparks" type="GPUParticles3D" parent="MuzzleFlashPrimary"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)
material_override = SubResource("StandardMaterial3D_62a0k")
emitting = false
amount = 20
lifetime = 0.2
one_shot = true
explosiveness = 0.7
randomness = 1.0
process_material = SubResource("ParticleProcessMaterial_0231x")
draw_pass_1 = SubResource("QuadMesh_x2ywe")

[node name="Smoke" type="GPUParticles3D" parent="MuzzleFlashPrimary"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)
material_override = SubResource("ShaderMaterial_hofw4")
cast_shadow = 0
emitting = false
amount = 12
one_shot = true
explosiveness = 0.85
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_87a0m")
draw_pass_1 = SubResource("SphereMesh_p8gj8")

[node name="Infantry" parent="." instance=ExtResource("18_8tceu")]
